// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract MyToken {
    string public name;
    string public symbol;
    uint256 public totalSupply;
    mapping(address => uint256) public balances;

    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {
        name = _name;
        symbol = _symbol;
        totalSupply = _initialSupply;
        balances[msg.sender] = _initialSupply;
    }

    /**
     *  Mint new tokens and increase the total supply
     *  _recipient The address to receive the minted tokens
     * _amount The amount of tokens to mint
     */
    function mint(address _recipient, uint256 _amount) public {
        require(_recipient != address(0), "Invalid address");
        
        totalSupply += _amount;
        balances[_recipient] += _amount;
    }

    /**
     *  Burn tokens and decrease the total supply
     * _holder The address from which to burn tokens
     *  _amount The amount of tokens to burn
     */
    function burn(address _holder, uint256 _amount) public {
        require(_holder != address(0), "Invalid address");
        require(balances[_holder] >= _amount, "Insufficient balance");

        totalSupply -= _amount;
        balances[_holder] -= _amount;
    }
}
